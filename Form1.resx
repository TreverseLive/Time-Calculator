<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="$this.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGpeXABqXlwBaV1bDmtf
        XRZsX10Wa19dFmldWxZlWVcWYlVUFmJVVBZnW1kWZ1tZFmJVVBZiVVQWZllXFmhcWhZjVlUWYlVUFmRX
        VRZoXFoObF9dAWpeXAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaFxaAGhc
        WjRoXFrDZVlX12NXVdZkWVfWaFxa1m9jYdZ0aGbWdGhm1mtfXdZsYF7WdGhm1nRoZtZuYmDWaV1b1nJm
        ZNZ0aGbWcWVj12ldW8NoXFo0aFxaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABoXFoAaV1bYmFVU/9XTUv/cWln/1VMSf9mXFn/qqGe/7qyr/+5sq7/l46L/5qRjf+6sq7/urKu/6ad
        mv+Jf3z/tq6q/7qzsP+0rKn/fXNw/2VZV2JoXFoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAGhcWgBpXVtjW1BN/2VdW/+Ce3n/YlpY/2deW//AubX/zMXB/8vEwP+wqKT/s6uo/9fR
        zv/X0s//vrez/6GYlP/OyMX/2dXS/8vFwf+Mgn//ZFdWY2hcWgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAaFxaAGldW2NbUE3/ZFxa/4N9e/9hWVf/Z15b/8C5tf/LxMD/ysPA/6+n
        pP+zq6f/087L/9TOy/+9trP/oJeU/83Hw//W0c7/ysTA/4yCf/9kV1ZjaFxaAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoXFoAaV1bY2JWVP9XTkv/bWRi/1ZMSv9mW1n/o5qX/7Kp
        pv+yqqb/kYeF/5SKh/+yqqb/sqqm/5+Wk/+DeXb/r6aj/7SsqP+tpKH/em9s/2ZZV2NoXFoAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGhcWgBpXVtjY1hW/1hOTP9gV1T/VUtJ/2FV
        U/9dU1H/a2Jf/2BWVP9eU1H/XlNR/1tRTv9eVFH/WlBN/3hta/+mnZr/q6Of/6Obl/91amf/ZlpYY2hc
        WgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaFxaAGldW2NcUU//VExJ/312
        dP9dVVL/VEpH/1FIRf+DfXr/WVFO/1BGRP9PRkP/VU1K/2hgXv9JQD3/j4aD/8zFwf/NxsP/ysO//4uB
        fv9kWFZjaFxaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoXFoAaV1bY1xR
        T/9KQT7/eXJw/11VU/9TSUb/TENA/2liX/9pYV//T0VD/09FQv9fV1T/b2hl/0lAPf+Qh4T/zcbD/8/J
        xv/KxMD/jIJ//2RXVmNoXFoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGhc
        WgBpXVtjX1RR/1VMSf94cW//V09M/1lPTP9USkf/dW5s/2RdWv9VS0j/VEpH/2VdWv9oYF7/TkRC/4Z8
        ef++t7P/v7i0/7y1sf+Cd3X/ZVhXY2hcWgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAaFxaAGhcWmNlWlj/WE1L/1dNSv9XTUr/ZFhW/1xRT/9bUk//V01K/2FVU/9gVVL/WE5L/1lO
        TP9bUU7/c2dl/5uSj/+hmJX/mY+M/3BkYv9nW1ljaFxaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABoXFoAaV1bY11SUP9US0j/eHFv/1lRTv9WTEn/UUdE/3JraP9oYF7/UkhF/1NJ
        Rv9zbGr/eHJv/09GQ/+LgX//ycK+/87IxP/Gv7v/h316/2RYVmNoXFoAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAGhcWgBpXVtjW1BN/2BYVf+WkY//W1NQ/1NJRv9ORUL/cmtp/2pj
        Yf9PRkP/UUdE/4B6eP9/eXf/TkVC/5CGg//Ox8T/3trX/8nCvv+Mgn//ZFhWY2hcWgAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaFxaAGldW2NdUlD/TURB/4B6eP9WTUr/VkxJ/1FI
        Rf9+eHb/WVFO/1JIRf9QRkT/ZFxZ/2RdWv9LQT7/jIKA/8vEwP/Tzcr/x8C8/4h+e/9kWFZjaFxaAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoXFoAaFxaY2VZV/9XTUr/WE5L/1hO
        S/9kWFb/XFFO/1xST/9ZT0z/YFVT/2BUUv9WTEn/V01K/1tQTv9zaGb/nJOQ/6KZlv+akI3/cGVj/2db
        WWNoXFoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGhcWgBpXVtjYFRS/1VM
        Sf9gV1X/TENA/1tQTv9VS0n/cWpo/2NbWP9WTEn/VUtI/1VMSv9dVFL/T0ZD/4R6eP+9tbH/wLm1/7qy
        rv+BdnP/ZVlXY2hcWgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaFxaAGld
        W2NcUU//TkZD/3ZvbP9MQ0D/VEpH/1ZNSv+LhYT/dm9t/1BGQ/9PRUP/Z2Bd/4eBf/9NREH/kIeE/9DJ
        xv/Y09D/zMXC/4yCf/9kV1ZjaFxaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABoXFoAaV1bY1xRT/9NRUL/fXZ0/1pST/9USUf/UkpH/4uGhP9xa2j/T0ZD/1BHRP93cW7/hX99/1JK
        R/+PhoP/zcbC/9PNyf/Kw7//i4F+/2RYVmNoXFoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAGhcWgBpXVtjY1dV/1pPTf9rYmD/Wk9N/19SUP9YTUr/Zlxa/11SUP9bT03/W09N/15U
        Uv9lW1n/V0xJ/3lta/+mm5n/qqCd/6OZlv92a2n/ZlpYY2hcWgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAaFxaAGhbWWNsZmL/dX93/3WAeP92gnn/d4J6/3eCev91gHj/doF5/3eC
        ev93gnr/doF5/3WAeP93gnr/doJ5/3iDe/94hHv/doF4/2tlYv9oW1ljaFxaAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoXFoAZ1lXY3+YjP+X1cD/l9W//5fVv/+X1b//l9W//5fV
        v/+X1b//l9W//5fVv/+X1b//l9W//5fVv/+X1b//l9W//5fVv/+X1cD/f5iM/2dZV2NoXFoAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGhcWgBnWlhjhKOW/5nZw/+Y18H/mNfB/5jX
        wf+Y18H/mNfB/5jXwf+Y18H/mNfB/5jXwf+Y18H/mNfB/5jXwf+Y18H/mNfB/5nZw/+Eo5b/Z1pYY2hc
        WgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaFxaAGdZWGODopX/mtvF/5nZ
        w/+Z2cP/mdnD/5nZw/+Z2cP/mdnD/5nZw/+Z2cP/mdnD/5nZw/+Z2cP/mdnD/5nZw/+Z2cP/mtvF/4Oi
        lf9nWVhjaFxaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoXFoAZ1lYYnR7
        dP+HrZ3/iK+f/4ivn/+Ir5//iK+f/4ivn/+Ir5//iK+f/4ivn/+Ir5//iK+f/4ivn/+Ir5//iK+f/4iv
        n/+HrZ3/dHt0/2dZWGJoXFoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGhc
        WgBoXFo0aFtZw2ldW9dpXlzWaV5c1mleXNZpXlzWaV5c1mleXNZpXlzWaV5c1mleXNZpXlzWaV5c1mle
        XNZpXlzWaV5c1mldW9doW1nDaFxaNGhcWgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAal5cAGteXAFpXVsOaVxaFmlcWhZpXFoWaVxaFmlcWhZpXFoWaVxaFmlcWhZpXFoWaVxaFmlc
        WhZpXFoWaVxaFmlcWhZpXFoWaVxaFmldWw5rXlwBal5cAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////////////////AAAP/wAAD/8AAA//AAAP/wAAD/8AAA//AAAP/wA
        AD/8AAA//AAAP/wAAD/8AAA//AAAP/wAAD/8AAA//AAAP/wAAD/8AAA//AAAP/wAAD/8AAA//AAAP/wA
        AD/8AAA//AAAP/wAAD////////////////8=
</value>
  </data>
</root>